table empresas(id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
nombre Varchar2(150 BYTE) Not Null,
direccion Varchar2(200 BYTE) Not Null,
correo  Varchar2(100 BYTE),
telefono Varchar2(100 BYTE),
nit Varchar2(50 BYTE) NOt Null, 
status Number(1) Default 0 Not Null 
CONSTRAINT check_status_empresas
  CHECK (status BETWEEN 0 And 1));

alter table empresas add(fiva Number default 0 Not Null);
alter table empresas add CONSTRAINT nombre_unique UNIQUE (nombre);


create table t_monedas(id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
siglas Varchar2(3 BYTE) Not Null,
descripcion Varchar2(100 BYTE));

alter table t_monedas add(tipo_cambio Number(10,5));
alter table t_monedas add CONSTRAINT siglas_unique UNIQUE (siglas);

---update t_monedas set tipo_cambio = 1;

create table contribuyentes(id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
nombres Varchar2(150 BYTE) Not Null,
apellidos Varchar2(150 BYTE),
nit Varchar2(50 BYTE),
direccion Varchar2(200 BYTE),
correo  Varchar2(100 BYTE),
telefonos Varchar2(100 BYTE),
status Number(1) Default 0 Not Null 
CONSTRAINT check_status_contribuyentes
  CHECK (status BETWEEN 0 And 1),
CONSTRAINT contribuyentes_unique UNIQUE (nit));

alter table contribuyentes add (dpi Varchar2(50 byte), cedula Varchar2(50 byte));
alter table contribuyentes add (fecha_creacion date not null,fecha_modi     date);

CREATE or REPLACE TRIGGER t_contribuy_trigger
before UPDATE OR INSERT of fecha_creacion ON contribuyentes
FOR EACH ROW
DECLARE
BEGIN
If inserting Then
    :new.fecha_creacion := sysdate;
    :new.fecha_modi := null;
End If;
If updating Then
    :new.fecha_modi := sysdate;
End If;
End;

create table m_facturas(id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
id_empresa Number Not Null,
nit Varchar2(50 BYTE) Not Null,
nombre Varchar2(150 BYTE) Not Null,
fecha_emision date Not Null,
tipo_DTE Varchar2(3 BYTE) Not Null,
CONSTRAINT check_tipo_DTE
CHECK (tipo_DTE IN ('FCC', 'FE', 'FC','NA','RE')),
moneda Varchar2(4) Default 'GTQ' Not Null,
tipo_cambio Number(10,5),
exportacion Number(1) Default 0 Not Null,
CONSTRAINT check_exportacion
CHECK (exportacion BETWEEN 0 And 1),
nit_receptor Varchar2(50 BYTE) Not Null,
receptor_descripcion Varchar2(150),
n_documento Varchar2(50) Not Null,
serie Varchar2(50) Not Null,
autorizacion Varchar2(75),
CONSTRAINT m_facturas_unique UNIQUE (id_empresa, nit, 
fecha_emision, tipo_DTE, nit_receptor, n_documento, serie));
/
alter table m_facturas add (fecha_creacion date not null,fecha_modi     date);
/
CREATE or REPLACE TRIGGER t_m_facturas_trigger
before UPDATE OR INSERT of fecha_creacion ON m_facturas
FOR EACH ROW
DECLARE
BEGIN
If inserting Then
    :new.fecha_creacion := sysdate;
    :new.fecha_modi := null;
End If;
If updating Then
    :new.fecha_modi := sysdate;
End If;
End;
/


alter table
   m_facturas
add constraint
   FK_FACTURAS_EMPRESAS FOREIGN KEY (ID_EMPRESA)
references
   EMPRESAS (ID)
initially deferred deferrable;
/
alter table
   m_facturas
add constraint
   FK_FACTURAS_NIT FOREIGN KEY (NIT)
references
   CONTRIBUYENTES (NIT)
initially deferred deferrable;
/
alter table
   m_facturas
add constraint
   FK_FACTURAS_NIT_RECEPTOR FOREIGN KEY (NIT_RECEPTOR)
references
   CONTRIBUYENTES (NIT)
initially deferred deferrable;
/

---FCC factura cambiaria pequeño contribuyente
---FE  Factura Especial
---FC  Factura pequeño contribuyente
---NA  Nota Abono
---RE  Recibo

---BIEN/SERVICIO CANTIDAD DESCRIPCION P.U.C/IVA DESCUENTO   TOTAL   

create table d_facturas(id Number Not Null,
bien_servicio Varchar2(1 BYTE) Not Null,
CONSTRAINT check_bien_servicio
CHECK (bien_servicio IN ('B', 'S')),
cantidad Number Not Null,
descripcion Varchar2(150 BYTE) Not Null,
pu_con_iva Number Not Null,
descuento Number Default 0 Not Null,
total Number Not Null);
/
---alter table d_facturas add constraint pk_d_facturas primary key (id);
---/

alter table
   d_facturas
add constraint
   FK_FACTURAS_M FOREIGN KEY (ID)
references
   M_FACTURAS (ID)  ON DELETE CASCADE;
----initially deferred deferrable  ON DELETE CASCADE;
/

---con system interfisa
GRANT CREATE ANY VIEW TO interfisa;

create or replace view nit_activos as
select id, nit,  Nvl(nombres,'')||' '||Nvl(apellidos,'') nombres
From contribuyentes
where status = 0;


create table t_user(id_user NUMBER(10,0) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
   usuario      varchar2(50) not null,
   nombres      varchar2(50),
   apellidos    varchar2(50),
   correo       varchar2(100), 
   direccion    varchar2(100),
   clave        varchar2(50) not null,
   reclave      varchar2(50) not null,
   fecha_creacion date not null,
   fecha_modi     date,
   CONSTRAINT t_user_unique UNIQUE (usuario));


---YA NO
alter table t_user
 add constraint check_password
 check (clave=reclave);
----

CREATE or REPLACE TRIGGER t_user_trigger
before UPDATE OR INSERT of fecha_creacion ON t_user
FOR EACH ROW
DECLARE
BEGIN
If inserting Then
    :new.fecha_creacion := sysdate;
    :new.fecha_modi := null;
End If;
If updating Then
    :new.fecha_modi := sysdate;
End If;
End;

create table t_roles (
  id_role	NUMBER(10,0) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  nombre        varchar2(50) not null);
  ----CONSTRAINT t_roles_unique UNIQUE (nombre));
ALTER TABLE t_roles ADD (APLICACION NUMBER, PAGINA NUMBER);
ALTER TABLE t_roles ADD TIPO_MENU VARCHAR2(50);

ALTER TABLE t_roles ADD app_name VARCHAR2(50);

alter table t_roles add CONSTRAINT role_unique UNIQUE (nombre, APLICACION);


create table t_roles_users (
 id_role_user	NUMBER(10,0) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
 id_role        number(10,0) NOT NULL,
 id_user        number(10,0) NOT NULL,
 CONSTRAINT FK_T_ROLES FOREIGN KEY (ID_ROLE) REFERENCES T_ROLES(ID_ROLE),
 CONSTRAINT FK_T_USER FOREIGN KEY (id_user) REFERENCES T_USER(ID_USER));

alter table t_roles_users add CONSTRAINT roles_users_unique UNIQUE (id_role, id_user);

Hi, An alternative is:
- click on page item
- go to Custom Attributes in right side panel
- add the the following code: onKeyUp="this.value = this.value.toLowerCase()"
onKeyUp="this.value = this.value.toUpperCase()"
toUpperCase();

function demo_projects_error_handling
(p_error in apex_error.t_error)
return apex_error.t_error_result

shared components
	application definition add
	error_handling
	la funcion que queremos
		que se muestre el valor

ora-02290 --Restriccion de control diferencia entre password


declare
result number(10.0);
user number(10,0);
begin

select ID_USER from t_USER where upper(:app_user) = upper(USERNAME);

select ID_ROLe_user  from 
t_roles_users where upper(user) = ID_USER and ID_ROL = 1; 

/*Este es el id del rol que asignamos en nuestra tabla LAB_ROL, en este caso 1 ya que más adelante colocamos 1 como el id del rol Home*/
return true;
EXCEPTION WHEN NO_DATA_FOUND THEN
return false;
end;

FUNCTION login_autenticacion
(p_username IN VARCHAR2, p_password IN VARCHAR2)
RETURN BOOLEAN
AS
validacion NUMBER := 0;
BEGIN
SELECT 1  FROM T_USER
WHERE UPPER(USUARIO) = UPPER(p_username)
AND CLAVE = p_password;

RETURN TRUE;
EXCEPTION WHEN NO_DATA_FOUND THEN
RETURN FALSE;
END login_autenticacion;


SELECT * FROM T_ROLES
ORDER BY ID_ROLE ASC



decode(nvl(dbms_lob.getlength(IMAGE),0),0,NULL,
'<img alt="'||apex_escape.html_attribute(ID)||'" title"'||apex_escape.html_attribute(
)||'" style="border: 4px solid #CCC; -moz-border-radius: 4px; -webkit-boder-radius: 4px;" '
||'src="'||apex_util.get_blob_file_scr('P4_IMAGE',ROWID)||'" height="75" width="75" />') "IMAGE2"


img(
width:50px;
height:100px;)


select "CARD_PK", 
"TITLE",
"CONTENT",
dbms_lob.getlength("IMAGE_BLOB") "IMAGE_BLOB",
"MIME_TYPE",
decode(nvl(dbms_lob.getlength(IMAGE_BLOB),0),0,NULL,
'<img alt="'||apex_escape.html_attribute(CARD_PK)||'" title="'||apex_escape.html_attribute(CARD_PK)
||'" style="border: 4px solid #CCC; -moz-border-radius: 4px; -webkit-boder-radius; 4px;" '
||'src="'||apex_util.get_blob_file_scr('IMAGE_BLOB',CARD_PK)||'" height="75" width="75" />') "IMAGE2"
from "#OWNER#"."MA_CARDS";

css -apex
inline 
label[for="CARD_TITLE"], #CARD_TITLE {  
  font-size: 16px !important;  
  font-weight: bold !important;  
  color: red! important;  
    }  


   select NOMBRES||' '||apellidos v_NOMBRES from CONTRIBUYENTES
   where NIT = '719479K';

----Otogar permisos a toda la mara   
INSERT INTO T_ROLES_USERS(ID_ROLE, ID_USER)     
SELECT ID_ROLE, 21 AS USER_ID FROM T_ROLES
ORDER BY 1 ASC;

102722   alphasistemas
112148   Reciclables


create table basura as
select distinct id_role, id_user from t_roles_users
where id_user = 21
order by id_role asc

delete from t_roles_users
where id_user in (21,41)
commit;

insert into t_roles_users(id_role, id_user)
select id_role, 21 as iduser from basura;
commit;
insert into t_roles_users(id_role, id_user)
select id_role, 41 as iduser from basura;
commit;

---Cambios recientes a la bd 10/09/2020

alter table t_user
add tipo_user Number(1) Default 0;
alter table t_user add CONSTRAINT 
CHECK_TIPO_USER CHECK (tipo_user IN (0,1)) ENABLE;

alter table t_user
modify (clave Varchar2(500), reclave Varchar2(500));


CREATE OR REPLACE EDITIONABLE TRIGGER "INTERFISA"."T_USER_TRIGGER2" 
before UPDATE OR INSERT of clave, reclave ON t_user
FOR EACH ROW
DECLARE
vnuevaclave Varchar2(500):=:new.clave;
vnuevareclave Varchar2(500):=:new.reclave;
BEGIN
    IF vnuevaclave <> vnuevareclave then
        RAISE_APPLICATION_ERROR(-20511,'Claves diferentes ...revise por favor');
    end if;
    vnuevaclave := QB_ENCRIPCION.FB_ENCRIPTAR(vnuevaclave);
    :new.clave := vnuevaclave;
    :new.reclave := vnuevaclave;
End;
/
ALTER TRIGGER "INTERFISA"."T_USER_TRIGGER2" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "INTERFISA"."T_USER_TRIGGER" 
before UPDATE OR INSERT of fecha_creacion, clave ON t_user
FOR EACH ROW
DECLARE
BEGIN
If inserting Then
    :new.fecha_creacion := sysdate;
    :new.fecha_modi := null;
End If;
If updating Then
    :new.fecha_modi := sysdate;
End If;
End;
/
ALTER TRIGGER "INTERFISA"."T_USER_TRIGGER" ENABLE;

alter table m_facturas
add bien_servicio Varchar2(1) Default 'B' Not Null;
alter table m_facturas Add CONSTRAINT check_bienservicio
CHECK (bien_servicio IN ('B', 'S')) ENABLE;

alter table m_facturas 
add direccion Varchar2(200);

create or replace view nit_activos as
select id, nit,  Nvl(nombres,'')||' '||Nvl(apellidos,'') nombres, DIRECCION
From contribuyentes
where status = 0;

create or replace FUNCTION login_autenticacion
(p_username IN VARCHAR2, p_password IN VARCHAR2)
RETURN BOOLEAN IS
    validacion NUMBER := 0;
BEGIN
    SELECT 1 INTO validacion FROM T_USER
    WHERE UPPER(USUARIO) = UPPER(p_username)
    AND UPPER(QB_ENCRIPCION.FB_DESCENCRIPTAR(CLAVE)) = UPPER(p_password);
    RETURN true;
    EXCEPTION WHEN NO_DATA_FOUND THEN
    RETURN FALSE;
END login_autenticacion;


-----
declare
result number(10.0);
user number(10,0);
vtipouser Number := 0;
begin
select ID_USER, tipo_user into user, vtipouser from T_USER where upper(:app_user) = upper(usuario);
If vtipouser = 0 Then ---Es administrador
       Return True;
Else
   Select b.ID_ROLE_USER Into result 
   From T_ROLES_USERS b, T_ROLES c
   Where b.id_user = user
   And   b.id_role = c.id_role
   And Upper(c.APP_NAME) = Upper(:app_name);
   RETURN true;
End If;
EXCEPTION WHEN NO_DATA_FOUND THEN
return false;
end;
-----


----NO es valida---no copiar
create or replace FUNCTION traer_acceso
(p_id_user IN NUMBER, p_app_name IN VARCHAR2)
RETURN BOOLEAN IS
    validacion Number := 0;
    vtipouser Number := 0;
BEGIN
    select Nvl(tipo_user,0) into vtipouser from T_USER where id_user = p_id_user;
    If vtipouser = 0 Then ---Es administrador
       return True;
    Else
        Select b.ID_ROLE_USER Into validacion 
        From T_ROLES_USERS b, T_ROLES c
        Where b.id_user = p_id_user
        And   b.id_role = c.id_role
        And Upper(c.APP_NAME) = Upper(p_app_name);
        RETURN true;
    End If;
    EXCEPTION WHEN NO_DATA_FOUND THEN
      RETURN FALSE;
END traer_acceso;

----grant execute, debug On traer_acceso to Public;

CREATE OR REPLACE FORCE EDITIONABLE VIEW "INTERFISA"."MONEDAS" ("SIGLAS","DESCRIPCION") AS 
  select SIGLAS, SIGLAS||'-'||DESCRIPCION DESCRIPCION 
From T_MONEDAS;

alter table "INTERFISA"."D_FACTURAS" drop column "BIEN_SERVICIO"

---tabla de productos
create table t_productos(id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
codigo Varchar2(20 Byte) Not Null,
descripcin Varchar2(150 BYTE) Not Null,
ubicacion Varchar2(200 BYTE) Not Null);

alter table t_productos add CONSTRAINT codigo_unique UNIQUE (codigo);

alter table d_facturas 
add codigo_producto Varchar2(20) Default 10 Not Null;

alter table
   d_facturas
add constraint
   FK_detalle_productos FOREIGN KEY (codigo_producto)
references
   t_productos (codigo)
initially deferred deferrable;
/

Select b.ID_ROLE_USER Into result 
From T_ROLES_USERS b, T_ROLES c
Where b.id_user = user
And   b.id_role = c.id_role
And Upper(c.APP_NAME) = Upper(:app_name); 



CREATE OR REPLACE FORCE EDITIONABLE VIEW "INTERFISA"."FACTURAS" 
(ID, TIPO_DTE, EMPRESA, NIT, NOMBRE, DIRECCION,
NIT_RECEPTOR, RECEPTOR_DESCRIPCION, AUTORIZACION,
DOCUMENTO, SERIE, FECHA_EMISION, FECHA_CREACIO, MONEDA) AS 
SELECT A.ID, DECODE(TIPO_DTE,'FCC','Factura cambiaria pequeño contribuyente',
                      'FE','Factura Especial',
                      'FC','Factura pequeño contribuyente',
                      'NA','Nota Abono',
                      'RE','Recibo') TIPO_DTE, 
B.NOMBRE EMPRESA, ' Nit Emisor:'||A.NIT, A.NOMBRE, Nvl(A.DIRECCION,' ') direccion, 
' Nit Receptor:'||A.NIT_RECEPTOR,
' Nombre Receptor:'||Nvl(A.RECEPTOR_DESCRIPCION,' ') RECEPTOR_DESCRIPCION, 
' NUMERO DE AUTORIZACION:'||A.AUTORIZACION, 
' Serie:'||A.SERIE, ' Numero de DTE:'||A.N_DOCUMENTO, 'Fecha y Hora de Emision:'||A.FECHA_EMISION,
A.FECHA_CREACION,  ' Moneda:'||A.MONEDA 
FROM M_FACTURAS A, EMPRESAS B
WHERE A.ID_EMPRESA = B.ID;

ID
CANTIDAD
DESCRIPCION
PU_CON_IVA
DESCUENTO
TOTAL
CODIGO_PRODUCTO

CREATE OR REPLACE FORCE EDITIONABLE VIEW "INTERFISA"."PRODUCTOS" 
(ID, BIEN_SERVICIO,
CODIGO_PRODUCTO, DESCRIPCION, CANTIDAD, 
PU_CON_IVA, DESCUENTO, TOTAL, KONTADOR) AS 
select A.ID, DECODE(B.BIEN_SERVICIO,'B','BIEN','SERVICIO') BIEN_SERVICIO,
A.CODIGO_PRODUCTO, A.DESCRIPCION, A.CANTIDAD, 
A.PU_CON_IVA, A.DESCUENTO, A.TOTAL,
  row_number() over (partition by A.ID order by A.ID) as KONTADOR
FROM D_FACTURAS A, M_FACTURAS B
WHERE A.ID = B.ID
order by A.ID, KONTADOR;

---POR GRUPOS
SELECT A.ID, DECODE(B.BIEN_SERVICIO,'B','BIEN','SERVICIO') BIEN_SERVICIO,
A.CODIGO_PRODUCTO, A.DESCRIPCION, A.CANTIDAD, 
A.PU_CON_IVA, A.DESCUENTO, A.TOTAL,
COUNT(*) OVER (PARTITION BY A.ID) AS KONTADOR
FROM D_FACTURAS A, M_FACTURAS B
WHERE A.ID = B.ID

----SUMA TODOS
SELECT A.ID, DECODE(B.BIEN_SERVICIO,'B','BIEN','SERVICIO') BIEN_SERVICIO,
A.CODIGO_PRODUCTO, A.DESCRIPCION, A.CANTIDAD, 
A.PU_CON_IVA, A.DESCUENTO, A.TOTAL,
COUNT(*) OVER () AS KONTADOR
FROM D_FACTURAS A, M_FACTURAS B
WHERE A.ID = B.ID

---SUMA INDIVIDUAL
select A.ID, DECODE(B.BIEN_SERVICIO,'B','BIEN','SERVICIO') BIEN_SERVICIO,
A.CODIGO_PRODUCTO, A.DESCRIPCION, A.CANTIDAD, 
A.PU_CON_IVA, A.DESCUENTO, A.TOTAL,
  row_number() over (partition by A.ID order by A.ID) as num
FROM D_FACTURAS A, M_FACTURAS B
WHERE A.ID = B.ID
order by A.ID
  
SELECT * FROM PRODUCTOS


insert into CONTRIBUYENTES (NOMBRES,APELLIDOS,NIT,DIRECCION,CORREO,TELEFONOS,STATUS,DPI,CEDULA)
values ('CRISTIAN WALDEMAR','ROSALES MELÉNDEZ','12153621','CONDADO SAN NICOLAS 3','CRISTIANROSAL@HOTMAIL.COM','33123395',1,'2193614440101',NULL);


select * from v$version

----clases cristian

create table master_fact(id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
id_empresa Number Not Null,
nit Varchar2(50 BYTE) Not Null,
nombre Varchar2(150 BYTE) Not Null,
fecha_emision date Not Null,
tipo_DTE Varchar2(3 BYTE) Not Null,
CONSTRAINT check_t_DTE
CHECK (tipo_DTE IN ('FCC', 'FE', 'FC','NA','RE')),
moneda Varchar2(4) Default 'GTQ' Not Null,
tipo_cambio Number(10,5),
exportacion Number(1) Default 0 Not Null,
CONSTRAINT check_expor
CHECK (exportacion BETWEEN 0 And 1),
nit_receptor Varchar2(50 BYTE) Not Null,
receptor_descripcion Varchar2(150),
n_documento Varchar2(50) Not Null,
serie Varchar2(50) Not Null,
autorizacion Varchar2(75),
CONSTRAINT master_fact_unique UNIQUE (id_empresa, nit, 
fecha_emision, tipo_DTE, nit_receptor, n_documento, serie));
/
alter table master_fact add (fecha_creacion date not null,fecha_modi     date);
/
CREATE or REPLACE TRIGGER t_master_fact_trigger
before UPDATE OR INSERT of fecha_creacion ON master_fact
FOR EACH ROW
DECLARE
BEGIN
If inserting Then
    :new.fecha_creacion := sysdate;
    ---:new.fecha_modi := null;
End If;
If updating Then
    :new.fecha_modi := sysdate;
End If;
End;
/


alter table
   master_fact
add constraint
   FK_FACT_NIT FOREIGN KEY (NIT)
references
   CONTRIBUYENTES (NIT)
initially deferred deferrable;
/
alter table
   master_fact
add constraint
   FK_FACT_NIT_RECEPTOR FOREIGN KEY (NIT_RECEPTOR)
references
   CONTRIBUYENTES (NIT)
initially deferred deferrable;
/

create table detalle_fact(id Number Not Null,
bien_servicio Varchar2(1 BYTE) Not Null,
CONSTRAINT chec_bien_servicio
CHECK (bien_servicio IN ('B', 'S')),
cantidad Number Not Null,
descripcion Varchar2(150 BYTE) Not Null,
pu_con_iva Number Not Null,
descuento Number Default 0 Not Null,
total Number Not Null);
/

alter table
   detalle_fact
add constraint
   FK_FACT_MASTER FOREIGN KEY (ID)
references
   MASTER_FACT (ID)  ON DELETE CASCADE;
/

